generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  middleName  String?
  phone       String?
  position    String?
  department  String?
  role        Role     @default(USER)
  status      String   @default("active")
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assignedIncidents Incident[] @relation("AssignedTo")
  createdIncidents  Incident[] @relation("CreatedBy")
  requests          Request[]  @relation("CreatedBy")
  assignedRequests  Request[]  @relation("AssignedTo")
  changes           Change[]   @relation("CreatedBy")
  assignedChanges   Change[]   @relation("AssignedTo")
  articles          Article[]  @relation("CreatedBy")
  sessions          Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Incident {
  id          String        @id @default(cuid())
  title       String
  description String
  priority    Priority      @default(MEDIUM)
  status      IncidentStatus @default(OPEN)
  category    String?
  assignedToId String?
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  resolvedAt  DateTime?

  assignedTo User? @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdBy  User @relation("CreatedBy", fields: [createdById], references: [id])

  @@map("incidents")
}

model Request {
  id          String        @id @default(cuid())
  title       String
  description String
  priority    Priority      @default(MEDIUM)
  status      RequestStatus @default(OPEN)
  category    String?
  assignedToId String?
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  resolvedAt  DateTime?

  assignedTo User? @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdBy  User @relation("CreatedBy", fields: [createdById], references: [id])

  @@map("requests")
}

model Change {
  id          String       @id @default(cuid())
  title       String
  description String
  priority    Priority     @default(MEDIUM)
  status      ChangeStatus @default(DRAFT)
  category    String?
  assignedToId String?
  createdById String
  scheduledAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  implementedAt DateTime?

  assignedTo User? @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdBy  User @relation("CreatedBy", fields: [createdById], references: [id])

  @@map("changes")
}

model Article {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    String?
  tags        String[]
  isPublished Boolean  @default(false)
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy User @relation("CreatedBy", fields: [createdById], references: [id])

  @@map("articles")
}

enum Role {
  USER
  TECHNICIAN
  MANAGER
  ADMIN
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum RequestStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ChangeStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  IN_PROGRESS
  IMPLEMENTED
  CANCELLED
}
