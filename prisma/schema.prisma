generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  password            String
  firstName           String
  lastName            String
  middleName          String?
  phone               String?
  position            String?
  department          String?
  role                Role           @default(USER)
  status              String         @default("active")
  isActive            Boolean        @default(true)
  lastLogin           DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  lastActivity        DateTime?
  passwordLastChanged DateTime?
  username            String?        @unique
  articles            Article[]      @relation("UserArticles")
  notifications       Notification[]
  workstations        Workstation[]
  assignedChanges     Change[]       @relation("AssignedTo")
  changes             Change[]       @relation("CreatedBy")
  assignedIncidents   Incident[]     @relation("AssignedTo")
  createdIncidents    Incident[]     @relation("CreatedBy")
  assignedRequests    Request[]      @relation("AssignedTo")
  requests            Request[]      @relation("CreatedBy")
  sessions            Session[]
  comments            Comment[]
  activityLogs        ActivityLog[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@index([userId])
  @@index([expiresAt])
}

model Incident {
  id             String         @id @default(cuid())
  title          String
  description    String
  priority       Priority       @default(MEDIUM)
  status         IncidentStatus @default(OPEN)
  category       String?
  assignedToId   String?
  createdById    String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  resolvedAt     DateTime?
  attachments    String[]
  expectedResult String?
  preActions     String?
  assignedTo     User?          @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdBy      User           @relation("CreatedBy", fields: [createdById], references: [id])

  @@map("incidents")
  @@index([status])
  @@index([createdAt])
}

model Request {
  id           String        @id @default(cuid())
  title        String
  description  String
  priority     Priority      @default(MEDIUM)
  status       RequestStatus @default(OPEN)
  category     String?
  assignedToId String?
  createdById  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  resolvedAt   DateTime?
  acknowledgmentFile String?
  assignedTo   User?         @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdBy    User          @relation("CreatedBy", fields: [createdById], references: [id])

  @@map("requests")
  @@index([status])
  @@index([createdAt])
}

model Change {
  id                    String       @id @default(cuid())
  title                 String
  description           String
  priority              Priority     @default(MEDIUM)
  status                ChangeStatus @default(DRAFT)
  category              String?
  assignedToId          String?
  createdById           String
  scheduledAt           DateTime?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  implementedAt         DateTime?
  affectedSystems       String[]
  approvers             String[]
  backoutPlan           String?
  businessJustification String?
  impact                String?
  implementationPlan    String?
  risk                  String?
  testPlan              String?
  urgency               String?
  assignedTo            User?        @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdBy             User         @relation("CreatedBy", fields: [createdById], references: [id])

  @@map("changes")
  @@index([status])
  @@index([createdAt])
}

model Article {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String
  category    String?
  tags        String[]
  isPublished Boolean  @default(false)
  status      String?
  helpful     Int      @default(0)
  notHelpful  Int      @default(0)
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  author      User     @relation("UserArticles", fields: [authorId], references: [id])
  comments    Comment[]
  views       Int      @default(0)
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Template {
  id          String   @id @default(cuid())
  type        String
  name        String
  description String?
  fields      Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ITResource {
  id          String   @id @default(cuid())
  name        String
  description String
  owner       String
  source      String
  roles       String[]
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Workstation {
  id          String   @id @default(cuid())
  name        String
  description String
  userId      String?
  ip          String?
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  department  String?
  room        String?
  type        String?
  user        User?    @relation(fields: [userId], references: [id])
}

model SystemSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  articleId String
  userId    String
  article   Article  @relation(fields: [articleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  status    String
  ip        String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
}

enum Role {
  USER
  TECHNICIAN
  MANAGER
  ADMIN
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum RequestStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ChangeStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  IN_PROGRESS
  IMPLEMENTED
  CANCELLED
}
